# personal_info.yaml
imports:
  - datetime
  - timedelta

define:
  min_age: 15
  days_in_year: 365.2425

fields:
  _age:
    #  return a random floating point number with gaussian distribution (mean=25 and standard deviation=5)
    random: gauss(25, 5)
    # minimum age is $min_age
    finalize: max($min_age, value)
  # This hidden field derives the percentage of foreign vs. domestic students
  _origin:
    mixture:
      - value: "Foreign"
        weight: 4
      - value: "Domestic"
        weight: 6
  gender_at_birth:
    mixture:
      - value: M
      - value: F
  gender_desc:
    switch:
      - onlyif: this.gender_at_birth == 'F'
        # random.choices returns a list even with k=1. To get one value from the list we wrap it in random.choice().
        lambda: random.choice(random.choices(['Woman', 'Transgender Woman / Trans Woman', 'Nonbinary', 
          'Different Identity'], weights=(10, 0.9, 0.1, 0.1), k=1))
      - default:
        lambda: random.choice(random.choices(['Man', 'Transgender Man / Trans Man', 'Nonbinary', 
          'Different Identity'], weights=(10, 0.9, 0.1, 0.1), k=1))
  gender_id:
    mixture:
      - value: 'Heterosexual or straight'
        weight: 9
      - value: 'Gay or lesbian'
        weigth: 1
      - value: 'Bisexual'
        weight: 1
      - value: 'Not listed'
        weight: 1

  # The data/names_by_gender_and_country.csv is generated by executing src/faker_name_by_gender_and_country.py
  # TODO: figure out why first_name and birth_city values are repeated for each of United States applicants.
  first_name:
    switch:
      - onlyif: this.birth_country == 'United Kingdom'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender_at_birth]
        depends: birth_country
      - onlyif: this.birth_country == 'Ireland'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender_at_birth]
        depends: birth_country
      - onlyif: this.birth_country == 'India'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender_at_birth]
        depends: birth_country
      - onlyif: this.birth_country == 'New Zealand'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender_at_birth]
        depends: birth_country
      - onlyif: this.birth_country == 'Thailand'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender_at_birth]
        depends: birth_country
      - onlyif: this.birth_country == 'United States'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender_at_birth]
        depends: birth_country
      - default:
        csv: data/name_gender_dataset.csv
        column: 0
        index: 1
        lookup: this.gender_at_birth
        depends: gender_at_birth
  middle_name:
    mixture:
      - value: "#{name.first_name}"
        weight: 4
      - value: ''
        weight: 6
  last_name: "#{name.last_name}"
  suffix:
    mixture:
      - value: JR
        weight: 1
      - value: SR
        weight: 1
      - value: II
        weight: 1
      - value: III
        weight: 1
      - value: IV
        weight: 1
      - value: ''
        weight: 9
  # To avoid having the same date of birth (dob) for all applicants with the same age, we subtract a random number
  # of days for each applicant
  _random_days:
    random: gauss(15, 5)
  dob:
    lambda: str(datetime.date.today() - (datetime.timedelta(days=this._age * ${days_in_year}) - datetime.timedelta(days=this._random_days)))
  birth_country:
    switch:
      - onlyif: this._origin == "Foreign"
        csv: data/worldcities.csv
        column: 3
      - onlyif: this._origin == "Domestic"
        value: "United States"
  birth_city:
    csv: data/worldcities.csv
    column: 0
    index: 3
    lookup: this.birth_country
    depends: birth_country
  attended_ca_public_school:
    mixture:
      - value: Y
      - value: N
  # The data/foreign_address.csv is generated by executing src/faker_foreign_address.py
  address_country:
    switch:
      - onlyif: this.birth_country == "United States"
        value: "United States"
      - default:
        csv: data/worldcities.csv
        column: 3
        index: 3
        lookup: this.birth_country
        depends: birth_country
  address_line1:
    switch:
      - onlyif: this.birth_country == "United States"
        value: "#{address.street_address}"
      - default:
        csv: data/foreign_addresses.csv
        column: 1
  address_line2:
    mixture:
      - value: ''
        weight: 5
      - value: "#{address.secondary_address}"
        weight: 3
  _us_city:
    csv: data/us_cities.csv
    column: 1
  address_city:
    switch:
      - onlyif: this.birth_country == "United States"
        lambda: this._us_city.title()
      - default:
        csv: data/worldcities.csv
        column: 0
        index: 3
        lookup: this.birth_country
        # depends: birth_country
  address_state:
    switch:
      - onlyif: this.birth_country == "United States"
        csv: data/free-zipcode-database-Primary.csv
        column: 3
        depends: address_zipcode
      - onlyif: this.birth_country != "United States"
        value: 'Not Applicable'
  address_zipcode:
    switch:
      - onlyif: this.birth_country == "United States"
        csv: data/free-zipcode-database-Primary.csv
        column: 0
        index: 2
        lookup: this._us_city.upper()
        depends: _us_city
      - default:
        csv: data/foreign_addresses.csv
        column: 3
        index: 0
        lookup: this.birth_country
        depends: birth_country
  send_mail:
    mixture:
      - value: Y
        weight: 9
      - value: N
        weight: 1
  phone_number: "#{phone_number.formats}"
  share_contact_info:
    mixture:
      - value: Y
        weight: 8
      - value: N
        weight: 2
  citizenship_country:
    csv: data/worldcities.csv
    column: 3
    index: 3
    lookup: this.birth_country
    depends: birth_country
  lived_in_ca_since:
    lambda: str(random.randint(1, 12)) + '-' + str(random.randint(2000, 2014))
  citizenship_status:
    switch:
      - onlyif: this.citizenship_country == "United States"
        value: 'Not applicable'
      - default:
        mixture:
          - value: 'Legal U.S. permanent resident'
            weight: 5
          - value: 'Refugee'
            weight: 1
          - value: 'Non-immigrant/foreign visa'
            weight: 2
  soc_sec: "#{id_number.invalid}"
  ca_resident:
    mixture:
      - value: Y
        weight: 5
      - value: N
        weight: 3