# a person generator
define:
  min_age: 10
  minor_age: 13
  working_age: 18
  days_in_year: 365.2425

imports:
  - datetime
  - timedelta

fields:
  age:
    #  return a random floating point number with gaussian distribution (mean=25 and standard deviation=5)
    random: gauss(25, 5)
    # minimum age is $min_age
    finalize: max($min_age, value)

  gender:
    mixture:
      - value: M
      - value: F

  # This hidden field derives the percentage of foreign vs. domestic students
  _origin:
    mixture:
      - value: "Foreign"
        weight: 4
      - value: "Domestic"
        weight: 6
  dob:
    lambda: datetime.date.today() - datetime.timedelta(days=this.age * ${days_in_year})

  birth_country:
    switch:
      - onlyif: this._origin == "Foreign"
        csv: data/worldcities.csv
        column: 3
      - onlyif: this._origin == "Domestic"
        value: "United States"

  birth_city:
    csv: data/worldcities.csv
    column: 0
    index: 3
    lookup: this.birth_country
    # TODO: why isn't this "depends" working? It generates United States records with foreign cities!
    depends: birth_country

  phone_number: "#{phone_number.formats}"
  demographic: "#{demographic.race}"
  name: "#{name.name}"
  job:
    value: "#{job.title}"
    onlyif: this.age > $working_age

  #address:
  #  template: address/usa.yaml
  country: "usa"
  street: "#{address.street_address}"
  address_line2:
    mixture:
      - value: ''
        weight: 80
      - value: "#{address.secondary_address}"
        weight: 20
  _city:
    csv: data/cities.csv
    column: 1
    weight: 3
  city:
    lambda: this._city.title()
  zipcode:
    csv: data/free-zipcode-database-Primary.csv
    column: 0
    index: 2
    lookup: this._city.upper()
    depends: _city
  state:
    csv: data/free-zipcode-database-Primary.csv
    column: 3
    depends: zipcode

  phone: # add a phone if the person is older than the minor age
    template: device/phone.yaml
    onlyif: this.age > ${minor_age}

  # we model our height as a gaussian that varies based on
  # age and gender
  height:
    lambda: this._base_height * this._age_factor
  _base_height:
    switch:
      - onlyif: this.gender == "F"
        random: gauss(60, 5)
      - onlyif: this.gender == "M"
        random: gauss(70, 5)

  _age_factor:
    switch:
      - onlyif: this.age < 15
        lambda: 1 - (20 - (this.age + 5)) / 20
      - default:
        value: 1