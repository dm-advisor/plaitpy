# applicant.yaml - University undergraduate applicant data generator
#
# Note: faker usage is limited to *.yml files that are available in the following path:
#  ~/plaitpy/venv/lib/site-packages/vendor/faker/lib/locales/en/
#
# To generate 10 sample records in JSON format, change directory to bin and then execute:
#     plait.py ../templates/undergrad/applicant.yaml --json --num 10
# To make the JSON output file pretty (easier for human consumption), execute:
#     python ../src/pretty_json.py {input-file-name}.json > {output-file-name}.json
#
imports:
  - datetime
  - timedelta

define:
  year_applied: 2023
  term_applied: 2
  min_age: 17
  days_in_year: 365.2425

fields:
  # category: application_info
  _applicant_id:
    template: undergrad/generate_id.yaml
    args:
      id_start:
        value: 1000000000
      id_end:
        value: 9999999999
  applicant_id:
    lambda: this._applicant_id["random_id"]
  academic_year:
    value: ${year_applied}
  academic_term:
    value: ${term_applied}
  application_level:
    mixture:
      - value: F
        weight: 10
      - value: T
        weight: 4
      - value: O
        weight: 0.5
  campus_major:
    template: campus_major.yaml

  # category: personal_info
  _age:
    #  return a random floating point number with gaussian distribution (mean=25 and standard deviation=3)
    random: gauss(23, 3)
    # minimum age is $min_age
    finalize: max($min_age, value)
    # This hidden field derives the percentage of foreign vs. domestic students
  _origin:
    mixture:
      - value: "Foreign"
        weight: 4
      - value: "Domestic"
        weight: 6
  gender_at_birth:
    mixture:
      - value: M
      - value: F
  gender_desc:
    switch:
      - onlyif: this.gender_at_birth == 'F'
        # random.choices returns a list even with k=1. To get one value from the list we wrap it in random.choice().
        lambda: random.choice(random.choices(['Woman', 'Transgender Woman / Trans Woman', 'Nonbinary',
          'Different Identity'], weights=(10, 0.9, 0.1, 0.1), k=1))
      - default:
        lambda: random.choice(random.choices(['Man', 'Transgender Man / Trans Man', 'Nonbinary',
          'Different Identity'], weights=(10, 0.9, 0.1, 0.1), k=1))
  gender_id:
    mixture:
      - value: 'Heterosexual or straight'
        weight: 9
      - value: 'Gay or lesbian'
        weigth: 1
      - value: 'Bisexual'
        weight: 1
      - value: 'Not listed'
        weight: 1
  # The data/names_by_gender_and_country.csv is generated by executing src/faker_name_by_gender_and_country.py
  first_name:
    switch:
      - onlyif: this.birth_country == 'United Kingdom'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [ 0, 3 ]
        lookup: [ this.birth_country, this.gender_at_birth ]
        depends: birth_country
      - onlyif: this.birth_country == 'Ireland'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [ 0, 3 ]
        lookup: [ this.birth_country, this.gender_at_birth ]
        depends: birth_country
      - onlyif: this.birth_country == 'India'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [ 0, 3 ]
        lookup: [ this.birth_country, this.gender_at_birth ]
        depends: birth_country
      - onlyif: this.birth_country == 'New Zealand'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [ 0, 3 ]
        lookup: [ this.birth_country, this.gender_at_birth ]
        depends: birth_country
      - onlyif: this.birth_country == 'Thailand'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [ 0, 3 ]
        lookup: [ this.birth_country, this.gender_at_birth ]
        depends: birth_country
      - onlyif: this.birth_country == 'United States'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [ 0, 3 ]
        lookup: [ this.birth_country, this.gender_at_birth ]
        depends: birth_country
      - default:
        csv: data/name_gender_dataset.csv
        column: 0
        index: 1
        lookup: this.gender_at_birth
        depends: gender_at_birth
  middle_name:
    mixture:
      - value: "#{name.first_name}"
        weight: 4
      - value: ''
        weight: 6
  last_name: "#{name.last_name}"
  suffix:
    mixture:
      - value: JR
        weight: 1
      - value: SR
        weight: 1
      - value: II
        weight: 1
      - value: III
        weight: 1
      - value: IV
        weight: 1
      - value: ''
        weight: 9
  # To avoid having the same date of birth (dob) for all applicants with the same age, we subtract a random number
  # of days for each applicant
  _random_days:
    random: gauss(15, 5)
  dob:
    lambda: str(datetime.date.today() - (datetime.timedelta(days=this._age * ${days_in_year}) - datetime.timedelta(days=this._random_days)))
  birth_country:
    switch:
      - onlyif: this._origin == "Foreign"
        csv: data/worldcities.csv
        column: 3
      - onlyif: this._origin == "Domestic"
        value: "United States"
  birth_city:
    csv: data/worldcities.csv
    column: 0
    index: 3
    lookup: this.birth_country
    depends: birth_country
  attended_ca_public_school:
    switch:
      - onlyif: this.birth_country != "United States"
        value: N
      - default:
        mixture:
          - value: Y
          - value: N
  # The data/foreign_address.csv is generated by executing src/faker_foreign_address.py
  address_country:
    switch:
      - onlyif: this.birth_country == "United States"
        value: "United States"
      - default:
        csv: data/worldcities.csv
        column: 3
        index: 3
        lookup: this.birth_country
        depends: birth_country
  address_line1:
    switch:
      - onlyif: this.birth_country == "United States"
        value: "#{address.street_address}"
      - default:
        csv: data/foreign_addresses.csv
        column: 1
  address_line2:
    mixture:
      - value: ''
        weight: 5
      - value: "#{address.secondary_address}"
        weight: 3
  _us_city:
    csv: data/us_cities.csv
    column: 1
    weight: 3
  address_city:
    switch:
      - onlyif: this.birth_country == "United States"
        lambda: this._us_city.title()
      - default:
        csv: data/worldcities.csv
        column: 0
        index: 3
        lookup: this.birth_country
        depends: birth_country
  address_state:
    switch:
      - onlyif: this.birth_country == "United States"
        csv: data/free-zipcode-database-Primary.csv
        column: 3
        depends: address_zipcode
      - onlyif: this.birth_country != "United States"
        value: 'Not Applicable'
  address_zipcode:
    switch:
      - onlyif: this.birth_country == "United States"
        csv: data/free-zipcode-database-Primary.csv
        column: 0
        index: 2
        lookup: this._us_city.upper()
        depends: _us_city
      - default:
        csv: data/foreign_addresses.csv
        column: 3
        index: 0
        lookup: this.birth_country
        depends: birth_country
  _free_email: "#{internet.free_email}"
  email_address:
    lambda: this.first_name[0].lower() + this.last_name.lower() + '@' + this._free_email
  hs_attended_state:
    switch:
      - onlyif: this.attended_ca_public_school == "Y"
        value: "In California"
      - default:
        mixture:
          - value: "Outside California (in the U.S.)"
          - value: "Outside the U.S."
  hs_name:
    switch:
      - onlyif: this.attended_ca_public_school == "Y"
        csv: data/Public_Schools.csv
        column: 0
        index: [1]
        lookup: [this.address_state]
      - onlyif: this.attended_ca_public_school == "N"
        csv: data/Private_Schools.csv
        column: 0
        index: [ 1 ]
        lookup: [ this.address_state ]
      - default:
        value: "N/A"
  hs_start_date:
    lambda: str(datetime.datetime.strptime(this.dob, '%Y-%m-%d').date() + datetime.timedelta(days=(${days_in_year} *
      random.uniform(12.0,13.0))))
  hs_end_date:
    lambda: str(datetime.datetime.strptime(this.hs_start_date, '%Y-%m-%d').date() +
      datetime.timedelta(days=(${days_in_year} * random.uniform(2.9,3.9))))
  where_attended_hs:
    switch:
      - onlyif: this.hs_attended_state == "In California"
        value: 'California'
      - onlyif: this.hs_attended_state == "Outside the U.S."
        csv: data/other_countries_of_the_world.csv
        column: 0
      - onlyif: this.hs_attended_state == "Outside California (in the U.S.)"
        csv: data/other_us_states.csv
        column: 1
  send_mail:
    mixture:
      - value: Y
        weight: 9
      - value: N
        weight: 1
  phone_number: "#{phone_number.formats}"
  share_contact_info:
    mixture:
      - value: Y
        weight: 8
      - value: N
        weight: 2
  citizenship_country:
    csv: data/worldcities.csv
    column: 3
    index: 3
    lookup: this.birth_country
    depends: birth_country
  year_in_ca_since:
    random: randint(2000, this.current_year)
  month_year_in_ca_since:
    lambda: str(random.randint(1, 12)) + '-' + str(this.year_in_ca_since)
  citizenship_status:
    switch:
      - onlyif: this.citizenship_country == "United States"
        value: 'Not Applicable'
      - default:
        mixture:
          - value: 'Legal U.S. permanent resident'
            weight: 5
          - value: 'Refugee'
            weight: 1
          - value: 'Non-immigrant/foreign visa'
            weight: 2
  soc_sec: "#{id_number.invalid}"
  ca_resident:
    switch:
      - onlyif: this.current_year - this.year_in_ca_since > 3
        value: Y
      - default:
        value: N

  current_year:
    lambda: datetime.date.today().year

  # category: demographics
  #  ethnicity: "#{demographic.race}"
  ethnicity:
    mixture:
      - value: 'American Indian or Alaska Native'
        weight: 1
      - value: 'Asian'
        weight: 7
      - value: 'Black or African American'
        weight: 3
      - value: 'Native Hawaiian or Other Pacific Islander'
        weight: 3
      - value: 'White'
        weight: 6
      - value: 'Other'
        weight: 4
      - value: 'Not Specified'
        weight: 2
  hispanic_latino:
    mixture:
      - value: Y
        weight: 1
      - value: N
        weight: 9
  first_gen_undergrad:
    mixture:
      - value: Y
        weight: 1
      - value: N
        weight: 2

  # category: background_info
  first_language:
    mixture:
      - value: 'English only'
      - value: 'English and another language'
      - value: 'Other language'
  other_language:
    switch:
      - onlyif: this.first_language == 'English only'
        value: ''
      - onlyif: this.first_language != 'English only'
        csv: data/other_languages_by_country.csv
        column: 1
        index: 0
        lookup: this.birth_country
  married_partnership:
    mixture:
      - value: Y
        weight: 1
      - value: N
        weight: 9
  military_dependent:
    mixture:
      - value: Y
        weight: 1
      - value: N
        weight: 9
  earned_income:
    random: randint(30000,250000)
  num_supported_by_income:
    mixture:
      - value: 1
      - value: 2
      - value: 3
      - value: 4
      - value: 5
  parent_education_level:
    mixture:
      - value: 'No high school'
      - value: 'Some high school'
      - value: 'High school graduate'
      - value: 'some college/University'
      - value: 'Two-year college/University graduate'
      - value: 'Four-year college/University graduate'
      - value: 'Postgraduate study'
  ca_resident_tuition:
    mixture:
      - value: Y
        weight: 5
      - value: N
        weight: 3
  diploma:
    mixture:
      - value: "None"
      - value: "High/Secondary School Diploma"
      - value: "IB Diploma"
      - value: "GED"
      - value: "Other"
  diploma_received_date:
    lambda: str(datetime.datetime.strptime(this.hs_end_date, '%Y-%m-%d').date() +
      datetime.timedelta(days=(${days_in_year} * random.uniform(0.1,0.9))))
  international_experience:
    mixture:
      - value: Y
        weight: 5
      - value: N
        weight: 3
## In the following 3 fields, to overwrite the default list of exams and
#  their weights in the templates provide the following arguments:
#      exams_list:
#        lambda: ['exam-1', 'exam-2', ...]
#      exams_weights:
#        lambda: (weight-1, weight-2, ...)
  ap_exams:
    template: undergrad/ap_exams.yaml
    args:
      hs_start_date:
        lambda: this.hs_start_date
  ib_exam:
    template: undergrad/ib_exams.yaml
    args:
      hs_start_date:
        lambda: this.hs_start_date
  eng_lang_proficiency:
    template: undergrad/eng_prof.yaml
    args:
      hs_start_date:
        lambda: this.hs_start_date

  activity_award:
    mixture:
      - value: 'Award or honor'
      - value: 'Educational preparation program'
      - value: 'Extracurricular activity'
      - value: 'Other coursework'
      - value: 'Volunteer/Community service'
      - value: 'Work experience'

hide:
  - current_year
  - years_in_ca
  - year_in_ca_since

# For some unknown reason, when mixin is used as shown below, as opposed to including all fields in one
# yaml file, then all applicants end up with the same first_name, birth_city, birth_country, address_city,
# address_state, address_zip, citizenship_country and citizenship_status values.
#
# mixin:
#  - application_info.yaml
#  - personal_info.yaml
#  - demographics.yaml
#  - background_info.yaml
