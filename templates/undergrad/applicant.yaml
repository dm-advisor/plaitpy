# a person generator
define:
  min_age: 15
  minor_age: 13
  working_age: 18
  days_in_year: 365.2425
  year_applied: 2023
  term_applied: 2

imports:
  - datetime
  - timedelta

fields:
  year:
    value: ${year_applied}
  term:
    value: ${term_applied}
  application_level:
    mixture:
      - value: F
        weight: 9
      - value: T
        weight: 4
      - value: O
        weight: 1
  # This hidden field derives the percentage of foreign vs. domestic students
  _origin:
    mixture:
      - value: "Foreign"
        weight: 4
      - value: "Domestic"
        weight: 6
  _age:
    #  return a random floating point number with gaussian distribution (mean=25 and standard deviation=5)
    random: gauss(25, 5)
    # minimum age is $min_age
    finalize: max($min_age, value)

 # The data/names_by_gender_and_country.csv is generated by executing src/faker_name_by_gender_and_country.py
  first_name:
    switch:
      - onlyif: this.birth_country == 'United Kingdom'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender]
        depends: birth_country
      - onlyif: this.birth_country == 'Ireland'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender]
        depends: birth_country
      - onlyif: this.birth_country == 'India'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender]
        depends: birth_country
      - onlyif: this.birth_country == 'New Zealand'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender]
        depends: birth_country
      - onlyif: this.birth_country == 'Thailand'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender]
        depends: birth_country
      - onlyif: this.birth_country == 'United States'
        csv: data/names_by_gender_and_country.csv
        column: 1
        index: [0, 3]
        lookup: [this.birth_country, this.gender]
        depends: birth_country
      - default:
        csv: data/name_gender_dataset.csv
        column: 0
        index: 1
        lookup: this.gender
        depends: gender
#  first_name: "#{name.first_name}"
  middle_name:
    mixture:
      - value: "#{name.first_name}"
        weight: 4
      - value: ''
        weight: 6
  last_name: "#{name.last_name}"
  suffix:
    mixture:
      - value: JR
        weight: 1
      - value: SR
        weight: 1
      - value: II
        weight: 1
      - value: III
        weight: 1
      - value: IV
        weight: 1
      - value: ''
        weight: 9
  # To avoid having the same dob for all applicants with the same age, we subtract a random number of days for each applicant
  _random_days:
    random: gauss(15, 5)
  dob:
    lambda: str(datetime.date.today() - (datetime.timedelta(days=this._age * ${days_in_year}) - datetime.timedelta(days=this._random_days)))
  birth_country:
    switch:
      - onlyif: this._origin == "Foreign"
        csv: data/worldcities.csv
        column: 3
      - onlyif: this._origin == "Domestic"
        value: "United States"
  birth_city:
    csv: data/worldcities.csv
    column: 0
    index: 3
    lookup: this.birth_country
    depends: birth_country
#  ca_public_school:
#    mixture:
#      - value: "Y"
#      - value: "N"
  # The data/foreign_address.csv is generated by executing src/faker_foreign_address.py
  address_country:
    switch:
      - onlyif: this.birth_country == "United States"
        value: "United States"
      - default:
        csv: data/worldcities.csv
        column: 3
        index: 3
        lookup: this.birth_country
        depends: birth_country
  address_line1:
    switch:
      - onlyif: this.birth_country == "United States"
        value: "#{address.street_address}"
      - default:
        csv: data/foreign_addresses.csv
        column: 1
  address_line2:
    mixture:
      - value: ''
        weight: 5
      - value: "#{address.secondary_address}"
        weight: 3
  _us_city:
    csv: data/us_cities.csv
    column: 1
  address_city:
    switch:
      - onlyif: this.birth_country == "United States"
        lambda: this._us_city.title()
      - default:
        csv: data/worldcities.csv
        column: 0
        index: 3
        lookup: this.birth_country
        depends: birth_country
  address_state:
    switch:
      - onlyif: this.birth_country == "United States"
        csv: data/free-zipcode-database-Primary.csv
        column: 3
        depends: address_zipcode
      - onlyif: this.birth_country != "United States"
        value: 'Not Applicable'
  address_zipcode:
    switch:
      - onlyif: this.birth_country == "United States"
        csv: data/free-zipcode-database-Primary.csv
        column: 0
        index: 2
        lookup: this._us_city.upper()
        depends: _us_city
      - default:
        csv: data/foreign_addresses.csv
        column: 3
        index: 0
        lookup: this.birth_country
        depends: birth_country
  send_mail:
    mixture:
      - value: Y
        weight: 9
      - value: N
        weight: 1
  phone_number: "#{phone_number.formats}"
  share_contact_info:
    mixture:
      - value: Y
        weight: 8
      - value: N
        weight: 2
  citizenship_country:
    csv: data/worldcities.csv
    column: 3
    index: 3
    lookup: this.birth_country
    depends: birth_country
  # citizenship_status:
  # soc_sec:
  ca_resident:
    mixture:
      - value: Y
        weight: 5
      - value: N
        weight: 3
  gender:
    mixture:
      - value: M
      - value: F
  demographic: "#{demographic.race}"
#  identity:
#  language:
#  first_language:
#  earned_income:
#  number_of_people:
#  parent_education_level:
#  residency_tuition:
#    mixture:
#      - value: Y
#        weight: 5
#      - value: N
#        weight: 3
#  campus_1:
#  campus_2:
#  hs_name:
#  hs_city:
#  hs_type:
#  hs_start_date:
#  hs_end_date:
#  diploma_received_month:
#  diploma_received_year:
#    mixture:
#      - value: "None"
#      - value: "High\/Secondary School Diploma"
#      - value: "IB Diploma"
#      - value: "GED"
#      - value: "Other"
#  hs_language:
#  international_experience:
#    mixture:
#      - value: Y
#        weight: 5
#      - value: N
#        weight: 3
#  ap_exams:
#  ib_exams:
#  eng_lang_proficiency:
#    mixture:
#      - value: "TOFEL iBT"
#      - value: "IELTS-Academic"
#      - value: "Duolingo English Test"
#      - value: "ACT English Language Arts"
#      - value: "SAT Writing & Language"
#  test_taken_month:
#  test_taken_year:





#  job:
#    value: "#{job.title}"
#    onlyif: this._age > $working_age
#
#  phone: # add a phone if the person is older than the minor age
#    template: device/phone.yaml
#    onlyif: this._age > ${minor_age}
#
#  # we model our height as a gaussian that varies based on
#  # age and gender
#  height:
#    lambda: this._base_height * this._age_factor
#  _base_height:
#    switch:
#      - onlyif: this.gender == "F"
#        random: gauss(60, 5)
#      - onlyif: this.gender == "M"
#        random: gauss(70, 5)
#
#  _age_factor:
#    switch:
#      - onlyif: this._age < 15
#        lambda: 1 - (20 - (this._age + 5)) / 20
#      - default:
#        value: 1
