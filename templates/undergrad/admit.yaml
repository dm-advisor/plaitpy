# admit.yaml - UC undergraduate admission campus data generator
#
# Note: faker usage is limited to *.yml files that are available in the following path:
#  ~/plaitpy/venv/lib/site-packages/vendor/faker/lib/locales/en/
#
# To generate 10 sample records in CSV format, change directory to bin and then execute:
#     plait.py ../templates/undergrad/admit.yaml --csv --num 10
#
imports:
  - datetime
  - timedelta
  - itertools

define:
  year_applied: 2023
  term_applied: 2

fields:
  applicant_id:
    # TODO: how to ensure uniqueness?
    random: randint(12500000,92500000)
  year:
    value: ${year_applied}
  term:
    value: ${term_applied}
  gender_identity:
    mixture:
      - value: 'F '  # Female
        weight: 1
      - value: 'M '  # Male
        weight: 0.9
      - value: 'TF' # Transgender Femal
        weight: 0.05
      - value: 'TM' # Transgender Male
        weight: 0.05
      - value: 'GN' # Gender Nonconforming
        weight: 0.04
      - value: 'DI' # Different Identity
        weight: 0.03
      - value: '  '
        weight: 0.9
  eop_aap_participation_code:
    mixture:
      - value: '1'
        weight: 1
      - value: '5'
        weight: 2
      - value: ' '
        weight: 9
  special_programs_code:
    value: '   '
  el_writing_req_code:
    mixture:
      - value: ' '
      - value: '1'
      - value: '2'
      - value: '3'
      - value: '4'
      - value: '5'
      - value: '6'
      - value: '8'
      - value: 'A'
      - value: 'S'
      - value: 'X'
  applicant_type_code:
    mixture:
      - value: '00'
      - value: '02'
      - value: '03'
  undergrad_class_lvl_code:
    mixture:
      - value: ' '
      - value: '1'
      - value: '2'
      - value: '3'
      - value: '4'
  campus_applied_to_code:
    mixture:
      - value: '01'
      - value: '03'
      - value: '04'
      - value: '05'
      - value: '06'
      - value: '07'
      - value: '08'
      - value: '09'
      - value: '10'
  college_proposed_code:
    csv: "data/CCM Undergrad_data.csv"
    column: 3
    index: 1
    lookup: this.campus_applied_to_code
  major_proposed_code:
    csv: "data/CCM Undergrad_data.csv"
    column: 5
    index: [1, 3]
    lookup: [this.campus_applied_to_code, this.college_proposed_code]
  prior_campus_ict_appl:
    mixture:
      - value: '  '
        weight: 10
      - value: '01'
        weight: 0.5
      - value: '03'
        weight: 0.5
      - value: '04'
        weight: 0.5
      - value: '05'
        weight: 0.5
      - value: '06'
        weight: 0.5
      - value: '07'
        weight: 0.5
      - value: '08'
        weight: 0.5
      - value: '09'
        weight: 0.5
      - value: '10'
        weight: 0.5
  sir_response_code:
    mixture:
      - value: ' '
      - value: '1'
      - value: '2'
      - value: '3'
      - value: '4'
      - value: '5'
      - value: '6'
      - value: '8'
  _admit_status_code:
    random: str(randint(1,22))
  admit_status_code:
    csv: "data/admit_status_code.csv"
    column: 1
    index: 0
    lookup: this._admit_status_code
  applicant_status_code:
    mixture:
      - value: '1'
      - value: '5'
      - value: '6'
      - value: '7'
      - value: '8'
      - value: '9'
  gpa_freshman_sr_campus:
    lambda: str(round(random.gauss(mu=4.0, sigma=0.185), 2)).ljust(4,'0')
  gpa_transfer_sr_campus:
    lambda: str(round(random.gauss(mu=3.2, sigma=0.1601), 2)).ljust(4,'0')
  _transfer_units:
    switch:
      - onlyif: this.campus_applied_to_code == '01'
        lambda: round(random.uniform(0.0, 70.0), 1)
      - onlyif: this.campus_applied_to_code == '10'
        lambda: round(random.uniform(0.0, 70.0), 1)
      - onlyif: this.campus_applied_to_code in ['03', '04', '05', '06', '07', '08', '09']
        lambda: round(random.uniform(0.0, 105.0), 1)
  transfer_units_estimated_self:
    lambda: str(this._transfer_units).rjust(5, '0')
  _transfer_units_attempted_graded_src:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_attempted_graded_src:
    lambda: str(this._transfer_units_attempted_graded_src).rjust(5, '0')
  _transfer_units_passed_graded_src:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_passed_graded_src:
    lambda: str(this._transfer_units_passed_graded_src).rjust(5, '0')
  _transfer_grade_points_graded_src:
    lambda: round(random.uniform(3.1, 4.0),1)
  transfer_grade_points_graded_src:
    lambda: str(this._transfer_grade_points_graded_src).rjust(5, '0')
  _transfer_units_passed_pn_src:
    lambda: round(this._transfer_units / random.randint(5,10),1)
  transfer_units_passed_pn_src:
    lambda: str(this._transfer_units_passed_pn_src).rjust(5, '0')
  transfer_units_accepted_src:
    lambda: str(round((this._transfer_units_attempted_graded_src + this._transfer_grade_points_graded_src + 
            this._transfer_units_passed_pn_src),1)).rjust(5, '0')
  _transfer_units_attempted_graded_uc:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_attempted_graded_uc:
    lambda: str(this._transfer_units_attempted_graded_uc).rjust(5, '0')
  _transfer_units_passed_graded_uc:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_passed_graded_uc:
    lambda: str(this._transfer_units_passed_graded_uc).rjust(5, '0')
  _transfer_grade_points_graded_uc:
    lambda: round(random.uniform(3.1, 4.0),1)
  transfer_grade_points_graded_uc:
    lambda: str(this._transfer_grade_points_graded_uc).rjust(5, '0')
  _transfer_units_attempted_graded_ttl:
    lambda: round((this._transfer_units_attempted_graded_src + this._transfer_units_attempted_graded_uc),1)
  transfer_units_attempted_graded_ttl:
    lambda: str(this._transfer_units_attempted_graded_ttl).rjust(5, '0')
  _transfer_units_passed_graded_ttl:
    lambda: round((this._transfer_units_passed_graded_src + this._transfer_units_passed_graded_uc),1)
  transfer_units_passed_graded_ttl:
    lambda: str(this._transfer_units_passed_graded_ttl).rjust(5, '0')
  _transfer_grade_points_graded_ttl:
    lambda: round((this._transfer_grade_points_graded_src + this._transfer_grade_points_graded_uc),1)
  transfer_grade_points_graded_ttl:
    lambda: str(this._transfer_grade_points_graded_ttl).rjust(5, '0')
  transfer_units_accepted_ttl:
    lambda: str(round((this._transfer_units_attempted_graded_ttl + this._transfer_units_passed_graded_ttl + 
            this._transfer_grade_points_graded_ttl) / random.randint(1,3),1)).rjust(5, '0')
  pre_college_dev_program_code:
    lambda: random.choice([''.join(i) for i in itertools.permutations([' ', '1', '2', '3', '4', '5', '6', '8', 
                  '9', 'A', 'B', 'D', 'F', 'G', 'H', 'L', 'M', 'P', 'Q', 'S',
                  'U', 'V', 'W', 'Y'], 3)]).ljust(6, ' ')
  application_id:
    # TODO: how to ensure uniqueness?
    random: str(randint(1250000,9250000))


