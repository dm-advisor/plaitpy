# admit.yaml - Undergraduate admission data generator
#
# Note: faker usage in plait.py is limited to *.yml files that are available in the following path:
#  ~/plaitpy/venv/lib/site-packages/vendor/faker/lib/locales/en/
#
# To generate 10 sample records in CSV format, change directory to bin and then execute:
#     plait.py ../templates/undergrad/admit.yaml --csv --num 10
#
# In Windows OS, the generated CSV file includes carriage return characters causing a blank line
# after each record. Execute the following script to remove them:
#      cat file1-name.csv | tr -d '\r' > file2-name.csv
define:
  year_applied: 2023
  term_applied: 2

fields:
  index: # Incrementing sequence
    lambda: prev.index + 1
    initial: 0
  _str_index:  # To use the index to lookup applicant_id it must be converted to string
    lambda: str(this.index)
  academic_year:
    lambda: str(${year_applied})
  academic_term:
    lambda: str(${term_applied})
  applicant_id: # Once applicant is admitted, this number becomes their student ID (unique across years and terms)
    switch:
      - onlyif: this.index != 0
        csv: data/indexed_applicants.csv # Refer to README.md for instructions to create this CSV file.
        column: 2
        index: [ 0, 1, 3 ]
        lookup: [ this.academic_year, this.academic_term, this._str_index ]
  gender_identity:
    mixture:
      - value: 'F '  # Female
        weight: 1
      - value: 'M '  # Male
        weight: 9
      - value: 'TF' # Transgender Female
        weight: 0.05
      - value: 'TM' # Transgender Male
        weight: 0.05
      - value: 'GN' # Gender Nonconforming
        weight: 0.04
      - value: 'DI' # Different Identity
        weight: 0.03
      - value: '  ' # Not specified
        weight: 0.5
  writing_proficiency_code:
    mixture:
      - value: ' ' # Not Applicable
        weight: 1
      - value: '1' # Does Not Meet Requirements
        weight: 1
      - value: '2' # Not proficient
        weight: 1
      - value: '3' # Meets Proficiency Requirements
        weight: 8
      - value: '4' # Above Average Proficiency
        weight: 4
      - value: '5' # Excellent Proficiency
        weight: 3
  math_proficiency_code:
    mixture:
      - value: ' ' # Undetermined
        weight: 1
      - value: '1' # Does Not Meet requirements
        weight: 1
      - value: '2' # Not proficient
        weight: 1
      - value: '3' # Meets Proficiency Requirements
        weight: 8
      - value: '4' # Above Average Proficiency
        weight: 4
      - value: '5' # Excellent Proficiency
        weight: 3
  undergrad_class_lvl_code:
    mixture:
      - value: ' ' # Undetermined
      - value: '1' # Freshman
      - value: '2' # Sophomore
      - value: '3' # Junior
      - value: '4' # Senior
  campus_proposed_code:
    mixture:
      - value: '01' # Berkeley
        weight: 7
      - value: '03' # Davis
        weight: 5
      - value: '04' # Los Angeles
        weight: 5
      - value: '05' # Riverside
        weight: 4
      - value: '06' # San Diego
        weight: 3
      - value: '07' # Santa Cruz
        weight: 3
      - value: '08' # Santa Barbara
        weight: 3
      - value: '09' # Irvine
        weight: 4
      - value: '10' # Merced
        weight: 1
  college_proposed_code:
    csv: "data/CCM Undergrad_data.csv"
    column: 3
    index: 1
    lookup: this.campus_proposed_code
  major_proposed_code:
    csv: "data/CCM Undergrad_data.csv"
    column: 5
    index: [1, 3]
    lookup: [this.campus_proposed_code, this.college_proposed_code]
  intent_to_register_code:
    switch:
      - onlyif: this.admit_status_code not in ['06','07','08','09','13']
        value: ' ' # Not Applicable
      - default:
        mixture:
          - value: '1' # Intends to register
            weight: 9
          - value: '2' # Does not intend to register
            weight: 1
  _admit_status_code:
    random: str(randint(1,22))
  admit_status_code:
    csv: "data/admit_status_code.csv"
    column: 1
    index: 0
    lookup: this._admit_status_code
  _transfer_units:
    switch:
      # Maximum allowed transfer units for semester campuses is 70.
      # Maximum allowed transfer units for quarter campuses is 105.
      - onlyif: this.campus_proposed_code == '01' or this.campus_proposed_code == '10'
        lambda: round(random.uniform(3.0, 70.0), 1)
      - onlyif: this.campus_proposed_code in ['03', '04', '05', '06', '07', '08', '09']
        lambda: round(random.uniform(4.0, 105.0), 1)
      - default:
        lambda: round(random.uniform(0.0, 105.0), 1)
  transfer_units_estimated_self:  # Format: 999.9
    lambda: str(this._transfer_units).rjust(5, '0')
  _transfer_units_attempted_graded_src:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_attempted_graded_src:  # Format: 999.9
    lambda: str(this._transfer_units_attempted_graded_src).rjust(5, '0')
  _transfer_units_passed_graded_src:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_passed_graded_src:  # Format: 999.9
    lambda: str(this._transfer_units_passed_graded_src).rjust(5, '0')
  _transfer_grade_points_graded_src:
    lambda: round(random.uniform(3.1, 4.0),1)
  transfer_grade_points_graded_src:  # Format: 999.9
    lambda: str(this._transfer_grade_points_graded_src).rjust(5, '0')
  _transfer_units_passed_pn_src:
    lambda: round(this._transfer_units / random.randint(5,10),1)
  transfer_units_passed_pn_src:  # Format: 999.9
    lambda: str(this._transfer_units_passed_pn_src).rjust(5, '0')
  transfer_units_accepted_src:  # Format: 999.9
    lambda: str(round((this._transfer_units_attempted_graded_src + this._transfer_grade_points_graded_src + 
            this._transfer_units_passed_pn_src),1)).rjust(5, '0')
  _transfer_units_attempted_graded:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_attempted_graded:  # Format: 999.9
    lambda: str(this._transfer_units_attempted_graded).rjust(5, '0')
  _transfer_units_passed_graded:
    lambda: round(this._transfer_units / random.randint(1,3),1)
  transfer_units_passed_graded:  # Format: 999.9
    lambda: str(this._transfer_units_passed_graded).rjust(5, '0')
  _transfer_grade_points_graded:
    lambda: round(random.uniform(3.1, 4.0),1)
  transfer_grade_points_graded:  # Format: 999.9
    lambda: str(this._transfer_grade_points_graded).rjust(5, '0')
  _transfer_units_attempted_graded_ttl:
    lambda: round((this._transfer_units_attempted_graded_src + this._transfer_units_attempted_graded),1)
  transfer_units_attempted_graded_ttl:  # Format: 999.9
    lambda: str(this._transfer_units_attempted_graded_ttl).rjust(5, '0')
  _transfer_units_passed_graded_ttl:
    lambda: round((this._transfer_units_passed_graded_src + this._transfer_units_passed_graded),1)
  transfer_units_passed_graded_ttl:  # Format: 999.9
    lambda: str(this._transfer_units_passed_graded_ttl).rjust(5, '0')
  _transfer_grade_points_graded_ttl:
    lambda: round((this._transfer_grade_points_graded_src + this._transfer_grade_points_graded),1)
  transfer_grade_points_graded_ttl:  # Format: 999.9
    lambda: str(this._transfer_grade_points_graded_ttl).rjust(5, '0')
  transfer_units_accepted_ttl:  # Format: 999.9
    lambda: str(round((this._transfer_units_attempted_graded_ttl + this._transfer_units_passed_graded_ttl + 
            this._transfer_grade_points_graded_ttl) / random.randint(1,3),1)).rjust(5, '0')

hide:
  - index
